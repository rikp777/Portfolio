__NUXT_JSONP__("/nl/projects/minor_algorithmics", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT,cU,cV,cW,cX,cY,cZ,c_,c$,da,db,dc,dd,de,df,dg,dh,di,dj,dk,dl,dm,dn,do0,dp,dq,dr,ds){bB.slug=bC;bB.description="What are algorithmics";bB.id=aY;bB.title="Algorithmics";bB.duration="2 weken";bB.image="\u002Fimages\u002Fprojects\u002Fminor\u002Falgorithm\u002Falgorithm.jpg";bB.tech=[{name:"math"},{name:"algorithmics"}];bB.category=[{name:"minor"},{name:"body of knowledge"}];bB.author={name:"Rik Peeters",image:"\u002Fimages\u002Fme.jpg",social:{twitter:"rikp777"}};bB.createdAt="2021-11-07T00:00:00.000Z";bB.toc=[{id:bD,depth:ad,text:bE},{id:bF,depth:ad,text:bG},{id:bH,depth:al,text:bI},{id:bJ,depth:al,text:bK},{id:bL,depth:ad,text:bM},{id:bN,depth:al,text:bO},{id:bP,depth:al,text:bQ},{id:bR,depth:al,text:bS},{id:bT,depth:ad,text:bU},{id:bV,depth:al,text:bW},{id:bX,depth:al,text:bY},{id:bZ,depth:ad,text:b_},{id:b$,depth:ad,text:aZ},{id:ca,depth:al,text:cb},{id:cc,depth:ad,text:cd},{id:ce,depth:ad,text:cf},{id:cg,depth:ad,text:a_},{id:ch,depth:ad,text:ci}];bB.body={type:"root",children:[{type:b,tag:q,props:{},children:[{type:b,tag:A,props:{href:"https:\u002F\u002Fclassroom.udacity.com\u002Fcourses\u002Fcs313",rel:["nofollow","noopener","noreferrer"],target:cj},children:[{type:a,value:"Udacity - Computer science"}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Article before I knew we had to write about the group project :)."}]},{type:a,value:h},{type:b,tag:ck,props:{id:"the-basics-for-algorithms"},children:[{type:b,tag:A,props:{href:"#the-basics-for-algorithms",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"The basics for algorithms"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"The simple truth is that algorithms are just ways to do things. They’re processes to solve a type of problem. These problems can be complex however, just because there are difficult algorithms doesn’t mean that all algorithms are that complex."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"You can begin thinking algorithmically by breaking the problem down and building the solution up, or by breaking the problem down and building the solution up. As developers, we have a natural urge to start with the solution. However, I would recommend breaking down the problem first and then creating the solution from there."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Thinking in small steps to solve a problem takes time. But it will however help us better understand the problem. The better an algorithm is, the shorter the time is to determine that an algorithm is faster, scientists have developed the big o notation later on we go into further detail."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"So, how do you even begin to think about these problems to solve in the first place. To solve a problem you always need data. This data we call a dataset this data gives us the possibility to do an analysis. Can I solve my problem with the data as it is now or should I first prepare this data so that it meets my needs. If you have answers to these questions we can start solving our problem. To begin with, it is useful to grab a small sample of your original dataset. With this sample we are going to work out our algorithm"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Using that principle for our algorithm, if we can get it to operate correctly with one item entry and then with ten, we can probably get it to work with any number of items. You'll eventually test it with a lot more to confirm. This gradual build-up aids you in comprehending the nuances and identifying the problem's subtle traps. During this process you really get to know the data."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"The running time of an algorithm can very with..."}]},{type:a,value:h},{type:b,tag:az,props:{},children:[{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"The size of the input"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"The content structure of the input"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"The type of computer we're using"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"The amount of memory the computer has"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"How the algorithm is implemented"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"The programming language used"}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:ae,props:{id:bD},children:[{type:b,tag:A,props:{href:"#data-structures",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bE}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"A data storage format. It is the collection of values and the format they are stored in, the relationships between the values in the collections as well as the operations applied on the data stored in the structure. These stored data collections are called arrays. These arrays can very per language examples of this are The language Java with homogeneous containers type are type bound. In python we have heterogeneous structures they are not type bound."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"It often occurs that during an algorithm it is necessary to sort or search for data. For these functions several already existing algorithms \u002F data structures have been developed. Some very well-known algorithms are:"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Searching:"}]},{type:a,value:h},{type:b,tag:az,props:{},children:[{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Linear search"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Binary search"}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Sorting:"}]},{type:a,value:h},{type:b,tag:az,props:{},children:[{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Insertion sort"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:a_}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Bubble sort"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Heapsort"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:aZ}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Quick sort"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Radix Sort"}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Data structures elements:"}]},{type:a,value:h},{type:b,tag:az,props:{},children:[{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Array n dimensional & Strings"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Boolean"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Trees"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Tuple & Sets"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Hashmap and hashtable"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Linked List"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Stack and Queues"}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Thankfully, you’ll probably never have to actually implement any of these algorithms as a professional developer. These days, the most efficient search and sort algorithms are provided in standard libraries that come with most languages. But still it is important for you to know how to use one and what the advantages and disadvantages are."}]},{type:a,value:h},{type:b,tag:ae,props:{id:bF},children:[{type:b,tag:A,props:{href:"#what-makes-a-good-algorithm",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bG}]},{type:a,value:h},{type:b,tag:am,props:{id:bH},children:[{type:b,tag:A,props:{href:"#correctness",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bI}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Sometimes a algothim does not give you a correct answer or the best answer because the only perfect algorithms that we know for those problems take a really, really long time. Fore example lets say we want a programm that would determine the most effiecient oute for a truck that delivers packages. staring and ending the day at a depot. It would take weeks to run to going through all the possibilites. But if we're okay with a program that would determine a route that goed but maybe not the best. Then i could run in seconds in some cases, good is good enough."}]},{type:a,value:h},{type:b,tag:am,props:{id:bJ},children:[{type:b,tag:A,props:{href:"#efficiency",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bK}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Asymptotic analysis allows algorithms to be compared independently of a particular pogramming laungauage or handware."}]},{type:a,value:h},{type:b,tag:ae,props:{id:bL},children:[{type:b,tag:A,props:{href:"#asymptotic-notation",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bM}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Let's think about the running time of an algorithm more carefully. We use a combination of two ideas. First, we determine how long the algorithm takes, in terms of the size of its input. So we think about the running time of the algorithm as a function of the size of its input. The second idea is that we focus on how fast this function grows with the input size. We call that the rate of growth of the running time. To keep things manageable, we simplify the function to distill the most important part and cast aside the less important parts."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"We'll see three forms of it: "},{type:b,tag:aw,props:{},children:[{type:a,value:cl}]},{type:a,value:" notation, "},{type:b,tag:aw,props:{},children:[{type:a,value:"big-O"}]},{type:a,value:" notation, and "},{type:b,tag:aw,props:{},children:[{type:a,value:"big-Ω"}]},{type:a,value:" notation."}]},{type:a,value:h},{type:b,tag:am,props:{id:bN},children:[{type:b,tag:A,props:{href:"#big-%CE%B8-notation",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bO}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"When we use "},{type:b,tag:aw,props:{},children:[{type:a,value:cl}]},{type:a,value:" notation, we're saying that we have an asymptotically tight bound on the running time. \"Asymptotically\" because it matters for only large values of "},{type:b,tag:aw,props:{},children:[{type:a,value:"n"}]},{type:a,value:". \"Tight bound\" because we've nailed the running time to within a constant factor above and below."}]},{type:a,value:h},{type:b,tag:am,props:{id:bP},children:[{type:b,tag:A,props:{href:"#big-o-notation",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bQ}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Big-O notation is used by programmers to compare and measure the performance of algorithms. Big O notation is one of the most fundamental tools for computer scientists to analyze the cost of an algorithm. It is a good practice for software engineers to understand in-depth as well. The big O notation gives a strong statement about the worst-case running time. We use big-Θ notation to asymptotically bound the growth of a running time to within constant factors above and below. Sometimes we want to bound from only above. Because big-O notation gives only an asymptotic upper bound, and not an asymptotically tight bound, we can make statements that at first blush seem incorrect, but are technically correct."}]},{type:a,value:h},{type:b,tag:"nuxt-link",props:{target:cj,rel:["some",a],to:cm},children:[{type:a,value:"\n  "},{type:b,tag:"img",props:{width:"80%",src:cm,alt:"Big O noation"},children:[]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:aK,props:{id:"o1-has-the-least-complexity"},children:[{type:b,tag:A,props:{href:"#o1-has-the-least-complexity",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"O(1) has the least complexity"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"If you can build an algorithm that solves the problem in O(1) notation, you are likely at your best possible solution. When the complexity of a scenario exceeds O(1), we can examine it by looking for its O(1\u002Fg(n)) equivalent. For instance, O(1\u002Fn) is more difficult than O(1\u002Fn2)."}]},{type:a,value:h},{type:b,tag:aK,props:{id:"ologn-is-more-complex-than-o1-but-less-complex-than-polynomials"},children:[{type:b,tag:A,props:{href:"#ologn-is-more-complex-than-o1-but-less-complex-than-polynomials",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"O(log(n)) is more complex than O(1), but less complex than polynomials"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Because sorting algorithms are frequently associated with divide and conquer algorithms, O(log(n)) is a desirable complexity to aim for. Because the square root function can be regarded a polynomial with an exponent of 0.5, O(log(n)) is less difficult than O(n)."}]},{type:a,value:h},{type:b,tag:aK,props:{id:"onˣ-complexity-of-polynomials-increases-as-the-exponent-increases"},children:[{type:b,tag:A,props:{href:"#on%CB%A3-complexity-of-polynomials-increases-as-the-exponent-increases",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"O(nˣ) Complexity of polynomials increases as the exponent increases"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"For example, O(n⁵) is more complex than O(n⁴). Due to the simplicity of it."}]},{type:a,value:h},{type:b,tag:aK,props:{id:"o2ⁿ-exponentials-have-greater-complexity-than-polynomials-as-long-as-the-coefficients-are-positive-multiples-of-n"},children:[{type:b,tag:A,props:{href:"#o2%E2%81%BF-exponentials-have-greater-complexity-than-polynomials-as-long-as-the-coefficients-are-positive-multiples-of-n",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"O(2ⁿ) Exponentials have greater complexity than polynomials as long as the coefficients are positive multiples of n"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"O(2ⁿ) is more complex than O(n⁹⁹), but O(2ⁿ) is actually less complex than O(1). We generally take 2 as base for exponentials and logarithms because things tends to be binary in Computer Science, but exponents can be changed by changing the coefficients. If not specified, the base for logarithms is assumed to be 2."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"you can write a book about big o notation so much and so big is the subject but for more information I would just google the topic."}]},{type:a,value:h},{type:b,tag:am,props:{id:bR},children:[{type:b,tag:A,props:{href:"#big-%CF%89-big-omega-notation",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bS}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"We might wish to declare that an algorithm takes at least a specific amount of time without specifying a maximum time. The Greek letter \"omega\" is used in big-Ω notation. We use big-Ω notation for "},{type:b,tag:aw,props:{},children:[{type:a,value:"asymptotic lower bounds"}]},{type:a,value:", since it bounds the growth of the running time from below for large enough input sizes."}]},{type:a,value:h},{type:b,tag:ck,props:{id:"lets-begin"},children:[{type:b,tag:A,props:{href:"#lets-begin",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:"Lets begin"}]},{type:a,value:h},{type:b,tag:ae,props:{id:bT},children:[{type:b,tag:A,props:{href:"#basics",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bU}]},{type:a,value:h},{type:b,tag:am,props:{id:bV},children:[{type:b,tag:A,props:{href:"#arrays",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bW}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Python = list = non type bound"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Java = array = type bound"}]},{type:a,value:h},{type:b,tag:am,props:{id:bX},children:[{type:b,tag:A,props:{href:"#executions",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:bY}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Operations on Data structures"}]},{type:a,value:h},{type:b,tag:az,props:{},children:[{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Access and read values"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Search for an arbitrary values"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Insert values at any point into the structure"}]},{type:a,value:h},{type:b,tag:z,props:{},children:[{type:a,value:"Delete values in the structure"}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"We access the data in the array by using the index of the stored positions of the value. Every value in the array has its index with which you can locate it also called an address. The base index in most languages is 0 to n; space = n * m."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:a,value:"new_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"    "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# 1"}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"   "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# IndexError: list index out of range "}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"You cannot access an address index that is larger than your instantiated array size. This will always result in an index out of bound error."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Lets now search for a value in our list with Linear search:"}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:" new_list "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:cq},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:a$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"break"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Lets insert a new value in the array: there are two methods to do so one on linear runtime and on constant time Append. They're different in that insert linear will insert in every given index and append will add to the array. But it also depends on the language we use."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:a,value:"numbers "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Default 1 element can be inserted "}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Will give 0 as answer "}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cr}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Will execute resize array "}]},{type:a,value:_}]}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"The append function will only increase the when the index will hit size 0, 4, 8, 16, 25, 35, 46... and so on we call this amortized constant space complexity."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Big-O of K | K = Number of items we append"}]},{type:a,value:"\nnumbers "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"extend"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"5"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"6"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Makes a serie of append calls"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:ae,props:{id:bZ},children:[{type:b,tag:A,props:{href:"#linked-list",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:b_}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Each data structure solves a particular problem. Arrays are particularly good at accessing\u002Freading values that will happen in constant time. But arrays are pretty bad at inserting and deleting which both run at linear time. Linked lists on the other hand are somewhat better at this although it has some problems. They are trying to solve a problem that involves far more inserts and deletes than accessing. A linked list can be a better tool than an array."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"A linked list is a linear data structure where each element in the list is contained in a separate object called a node. A node models two pieces of information an individual item of the data we want to store and a reference to the next node in the list. The first node in the linked list is called the head of the list. While the last node is called the tail. The head and the tail nodes are special the list only maintains a reference to the head although in some implementations it keeps a reference to the tail as well. Every node other than the tail point to the next node in the list. But the tail doesn't point to anything this is how we know it's the end of the list. Nodes are what called self-referential objects. Linked lists usually come in two forms a singly linked list where each node stores a reference to the next node in the list or a doubly linked list where each node stores a reference to both the node before and after"}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:cs}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,ct]},children:[{type:a,value:"Node"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cu},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# An object for storing a single node of a linked list"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Models tow attributes - data and the link to the next node in the         list"}]},{type:a,value:"\n    \n    data "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# To hold on to the data we are storing"}]},{type:a,value:"\n    next_node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# To point to the next node in the list"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" data\n        \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"\u003CNode data: %s\u003E\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# ToString value"}]},{type:a,value:cq},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:cs}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,ct]},children:[{type:a,value:"LinkedList"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Singly linked list"}]},{type:a,value:"\n  \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cv}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"is_empy"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return the number of nodes in the list "}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Takes 0(n) \u002F linear time"}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n        count "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            count "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cy},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" count\n\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Adds new Node container data at head of the list"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Takes 0(1) time"}]},{type:a,value:"\n        \n        new_node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:cz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        new_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n        self"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" new_node\n        \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"search"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Search for the first node containing data that maches the key"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return the node or 'None' if not found"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:be}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cA},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n                "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" current \n            "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cC},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"insert"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bb},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Inserts a new Node containing data at index position "}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Insertion takes 0(1) time but infing the node at the insertion point take 0(n time)"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Takes overal 0(n) time"}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            self"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bg}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            new "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:cz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            \n            position "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" index \n            current "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n            \n            "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:cD},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bg}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n                position "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"-="}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:" \n                \n            prev_node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" current \n            next_node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node \n            \n            prev_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" new \n            new"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" next_node\n    \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"remove"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Removes Node containing data that matches the key"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return the node of None if key doesn't exists"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:be}]},{type:a,value:bc},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n        previous "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:";"}]},{type:a,value:"\n        found "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:cE}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aO}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bi}]},{type:a,value:" found"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:" key "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aO}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cF},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:aA}]},{type:a,value:"\n                self"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cF},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:aA}]},{type:a,value:" \n                previous"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n                previous "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" current\n                current "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cC},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" current     \n        \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n        "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n            position "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:cD},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n            possition "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:cH},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" current\n        \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return a string representation of the list"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:be}]},{type:a,value:"\n        \n        nodes "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:cI},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cA},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:Z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"[Head: %s]\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"[Tail: %s]\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:bl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"[%s]\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            \n            current "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n        "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"'-\u003E '"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"join"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"nodes"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n         \n        \n        \n"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [Head],[],[],[],[Tail]"}]},{type:a,value:cJ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# returns 1 "}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# returns 3"}]},{type:a,value:"\n\nl "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# returns [Head: 3]-\u003E [2]-\u003E [Tail: 1]"}]},{type:a,value:"\n        \n"}]}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Head can be seen as the top of an book pile its the first book you pick from the pile. Unlike arrays where when you insert an element into the array all element after the particular index need to be shifted. With a linked list we just need to change the references to next on a few nodes. This way we can insert a node at any point in the list in constant time."}]},{type:a,value:h},{type:b,tag:ae,props:{id:b$},children:[{type:b,tag:A,props:{href:"#merge-sort",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:aZ}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Merge sort works like binary sort by splitting up the problem into sub problems. But it takes it one step further. In the first sequence we split the array into two smaller arrays on the second sequence we are going to split the first sequence again and so on until we are down to single element arrays. After that the merge sort algorithm works backwards. By repeatedly merging the single element arrays and sorting them at the same time."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Solving a problem like this by recursively breaking down the problem into subparts until it is easily solvable is an algorithmic strategy called divide and conquer."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Sorts a list in ascending order "}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return a new sorted list "}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Devide: Find the midpoint of the list and divide into sublists"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Conquer: Recursively sort the sublist created in previous step"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Combine: Merge the sorted sublists created in previous step "}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Takes O(kn log n) time"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bm}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:a,value:" \n    \n    left_half"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:cL},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:cM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n    \n    left "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:cP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Divide the unsorted list at midpoint into sublists"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Returns two sublists - left and right"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Takes overal O(k log n) time"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:"min"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:cR}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:a,value:cS},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# list[0:mid]            Takes n of k "}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:cT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# list[mid:len(list)]"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" right\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cU}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Merges two lists (arrays), sorting them in the process"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return a new merged list"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Runs in overal O(n) time"}]},{type:a,value:"\n    \n    l "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    i "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:"\n    j "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aO}]},{type:a,value:cV},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            i "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\u003E="}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n            j "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:"\n   \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        i "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:" \n        \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:cV},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        j "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:"\n     \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" l\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:bo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    n "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Stopping condition "}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bp}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cY},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" true\n    \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aO}]},{type:a,value:" verify_sorted"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [1, 2, 3, 4, 5]"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [2, 3, 4, 5]"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [3, 4, 5]"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [4, 5]"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [5]"}]},{type:a,value:"\n\n        \nalist "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"54"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"62"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"93"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"17"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"77"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"31"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"55"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"20"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:cJ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:c_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return [17, 20, 31, 44, 54, 62, 77, 93]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:c_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return False"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bo},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return True"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:am,props:{id:ca},children:[{type:b,tag:A,props:{href:"#linked-list-merge-sort",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:cb}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:" LinkedList\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Sorts a linked list in ascending order"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# - Recursively divide the linked list into sublists containing a single node"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# - Repeatedly merge the sublists to produce sorted sublists until on remains "}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Returns a sorted linked list"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" linked_list\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" linked_list\n    \n    left_half"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:cL},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:cM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:cS},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:cP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Divide the unsorted list at midpoint into sub linked lists"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bp}]},{type:a,value:bq},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        left_half "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" linked_list\n        right_half "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:O}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:cH},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:c$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" right_half\n    \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        size "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        mid "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" size"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:cR}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:a,value:" \n    \n        mid_node "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"mid "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:da}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        \n        left_half "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" linked_list \n        right_half "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        right_half"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" mid_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n        mid_node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:c$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" right_half\n  \n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:cU}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Merges two linked lists, sorting by data in the nodes"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Return a new, merged list"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Create a new linked list that contains nodes from "}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Merging left and right"}]},{type:a,value:"\n    merged "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Add a fake head that is discarded later "}]},{type:a,value:"\n    merged"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Set current to the head of the linked list"}]},{type:a,value:"\n    current "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:db},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:dc},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Obtain head nodes for left and right linked lists"}]},{type:a,value:"\n    left_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"head\n    right_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:dc},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Iterate over left and right unril we reach the tail node of either"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:dd},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bp}]},{type:a,value:" right_head\n        "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# If the head node of left is None, we are past the tail"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Add the node from right to merged linked list"}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:dd},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:de},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" right_head\n            "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call next on right to set loop condition to False "}]},{type:a,value:"\n            right_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:cy},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# If the head node of tight is None, we are past the tail"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Add the tail node from left to merged linked list"}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aD}]},{type:a,value:" right_head "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aE}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:P}]},{type:a,value:de},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" left_head\n            "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call next on left to set loop condition to False"}]},{type:a,value:"\n            left_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bt},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n            \n        "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Not at either tail node "}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Obtain node data to perform comparison operations"}]},{type:a,value:"\n            left_data "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bt},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"data\n            right_data "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"data\n            "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# If data on left is less than right, set current to left node"}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:" left_data "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:" right_data"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:df},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" left_head\n                "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Move left head to next node "}]},{type:a,value:"\n                left_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bt},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# If data on left is greater than right, set current to right node"}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:df},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" right_head\n                "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Move right head to next node"}]},{type:a,value:"\n                right_head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node \n         \n        "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Move current to next node"}]},{type:a,value:cI},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n     \n    "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Discard fake head and set first merged node as head"}]},{type:a,value:"\n    head "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:db},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"next_node\n    merged"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" head\n    \n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" merged \n   \nl "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"15"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cr}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\nsorted_linked_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" merged_sort"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"sorted_linked_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#[Head: 200]-\u003E [15]-\u003E [44]-\u003E [2]-\u003E [Tail: 10]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#[Head: 2]-\u003E [10]-\u003E [15]-\u003E [44]-\u003E [Tail: 200]"}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# split -\u003E size "}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# midpoint = 2 "}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#[Head: 200]-\u003E [15]-----\u003E [44]-\u003E [2]-\u003E [Tail: 10]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#Left : [Head: 200]-\u003E [15] "}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#SubLeft : [Head: 200]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#SubRight : [Head: 15]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#Current: [Head: 15]-\u003E [200]"}]},{type:a,value:"\n\n\n"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#Right: [Head: 44]-\u003E [2]-\u003E [Tail: 10]"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"These are the data structures I began with, these are the fundamentals for algorithmic."}]},{type:a,value:h},{type:b,tag:ae,props:{id:cc},children:[{type:b,tag:A,props:{href:"#recursion",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:cd}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"The ability of a function to call itself. Recursive functions are difficult to understand. The flow of control is quite complex."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Normal"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    total "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:" number "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        total "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:" number\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" total\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dg}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Recursion"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bi}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:cY},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:cu},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"Calling sum(%s)\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n    remaining_sum "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"Call to sum(%s) returning %d + %d\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" remaining_sum"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aX}]},{type:a,value:" remaining_sum\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dg}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:dh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Calling sum([2, 7, 9])"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Calling sum([7, 9])"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Calling sum([9])"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Calling sum([])"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call sum([9]) returning 9 + 0"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call sum([7, 9]) returning 7 + 9"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call sum([2, 7, 9]) returning 2 + 16"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Call sum([1, 2, 7, 9]) returning 1 + 18"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# Result: 19"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:ae,props:{id:ce},children:[{type:b,tag:A,props:{href:"#quick-sort",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:cf}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways."}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"List: [4, 6, 3, 2, 9, 7, 3, 5]"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"​\tPivot: [4]"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"​\tLess than pivot: [3, 2, 3]  -\u003E  [2, 3] [3] [ ]  -\u003E  [ ] [2] [3] = [2, 3]  -\u003E  [2, 3] [3] [ ]  -\u003E  [2, 3, 3]"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"​\tGreater than pivot: [6, 9, 7, 5] -\u003E [5] [6] [9, 7]  -\u003E  [5, 6, 7, 9]"}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"[2, 3, 3, 4, 5, 6, 7, 9]"}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:di},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"quicksort"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bm}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" values \n    less_than_pivot "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    greater_than_pivot "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    pivot "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" value"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:dj},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:dj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bm}]},{type:a,value:dk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            less_than_pivot"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:dl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ap}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            greater_than_pivot"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:dl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:"\"%15s %1s %-15s\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:dm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:dk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:" greater_than_pivot"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:dm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aX}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:"pivot"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aX}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"greater_than_pivot"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:dn},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [4, 6, 3, 2, 9, 7, 3, 5]"}]},{type:a,value:"\nsorted_number "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [3, 2, 3] 4 [6, 9, 7, 5]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#    [2, 3] 3 []"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#        [] 2 [3]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#       [5] 6 [9, 7]"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"#       [7] 9 []"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"sorted_numbers"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:dn},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"# [2, 3, 3, 4, 5, 6, 7, 9]"}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:ae,props:{id:cg},children:[{type:b,tag:A,props:{href:"#selection-sort",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:a_}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Also a bad sorting sorting algorithm. With each loop we will look through each of the values in the unsorted array and find the smallest value and move that value to the end of the sorted array. We start with the first value in the unsorted and say its the minimum or smallest value we have seen so far for now. Than we will look at the next value and see if that one is smaller than the current smallest value if so we mark is as the new minimum. We continue that way until we reach the end of the list. We know that the value that we have marked is the smallest value in the array. Than we move that value from the current list to a new list called sorted and we delete it from the current list. We do this until there are no more items in the unsorted array."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:di},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:do0}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    sorted_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:dp}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:dq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:bA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        index_to_move "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" index_of_min"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        sorted_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"pop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"index_to_move"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,af]},children:[{type:a,value:dp}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aj}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:dq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" sorted_list \n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"index_of_min"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    min_index "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:bA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:r}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:"min_index"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            min_index "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:" i\n    "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" min_index\n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:do0},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:h}]}]}]},{type:a,value:h},{type:b,tag:ae,props:{id:ch},children:[{type:b,tag:A,props:{href:"#bogo-sort",ariaHidden:D,tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:ci}]},{type:a,value:h},{type:b,tag:q,props:{},children:[{type:a,value:"Bad sorting randomly switching numbers till its sorted. Stumbling on a solution is literally a matter of luck and for lists with more than a few items it might never happen."}]},{type:a,value:h},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:W,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:" random\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aV}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ar}]},{type:a,value:" load_number \n\nnumber "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"is_sorted"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ax}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:as}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:bA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,w]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:da}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:J}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:"index"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bg}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:"index "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aX}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:cE}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:aA}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:B}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:dr}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    attempts "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:m}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:K}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aa}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bi}]},{type:a,value:" is_sorted"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:v},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"attempts"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        random"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"shuffle"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"\n        attempts "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:x}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:y}]},{type:a,value:" values \n\n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:dr},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_}]}]}]}]};bB.dir="\u002Fprojects\u002Fminor";bB.path="\u002Fprojects\u002Fminor\u002Falgorithmics";bB.extension=".md";bB.updatedAt="2022-01-17T15:02:36.882Z";bB.bodyPlainText="\n\n\n[Udacity - Computer science](https:\u002F\u002Fclassroom.udacity.com\u002Fcourses\u002Fcs313)\n\nArticle before I knew we had to write about the group project :).\n\n# The basics for algorithms \n\nThe simple truth is that algorithms are just ways to do things. They’re processes to solve a type of problem. These problems can be complex however, just because there are difficult algorithms doesn’t mean that all algorithms are that complex.\n\nYou can begin thinking algorithmically by breaking the problem down and building the solution up, or by breaking the problem down and building the solution up. As developers, we have a natural urge to start with the solution. However, I would recommend breaking down the problem first and then creating the solution from there.\n\nThinking in small steps to solve a problem takes time. But it will however help us better understand the problem. The better an algorithm is, the shorter the time is to determine that an algorithm is faster, scientists have developed the big o notation later on we go into further detail. \n\nSo, how do you even begin to think about these problems to solve in the first place. To solve a problem you always need data. This data we call a dataset this data gives us the possibility to do an analysis. Can I solve my problem with the data as it is now or should I first prepare this data so that it meets my needs. If you have answers to these questions we can start solving our problem. To begin with, it is useful to grab a small sample of your original dataset. With this sample we are going to work out our algorithm \n\nUsing that principle for our algorithm, if we can get it to operate correctly with one item entry and then with ten, we can probably get it to work with any number of items. You'll eventually test it with a lot more to confirm. This gradual build-up aids you in comprehending the nuances and identifying the problem's subtle traps. During this process you really get to know the data. \n\nThe running time of an algorithm can very with...\n\n- The size of the input\n- The content structure of the input\n- The type of computer we're using \n- The amount of memory the computer has \n- How the algorithm is implemented \n- The programming language used \n\n## Data structures \n\nA data storage format. It is the collection of values and the format they are stored in, the relationships between the values in the collections as well as the operations applied on the data stored in the structure. These stored data collections are called arrays. These arrays can very per language examples of this are The language Java with homogeneous containers type are type bound. In python we have heterogeneous structures they are not type bound.\n\nIt often occurs that during an algorithm it is necessary to sort or search for data. For these functions several already existing algorithms \u002F data structures have been developed. Some very well-known algorithms are:\n\n Searching:\n\n- Linear search\n- Binary search\n\nSorting:\n\n- Insertion sort\n- Selection sort\n- Bubble sort\n- Heapsort \n- Merge sort \n- Quick sort\n- Radix Sort\n\nData structures elements: \n\n- Array n dimensional & Strings\n- Boolean\n- Trees \n- Tuple & Sets \n- Hashmap and hashtable\n- Linked List \n- Stack and Queues \n\nThankfully, you’ll probably never have to actually implement any of these algorithms as a professional developer. These days, the most efficient search and sort algorithms are provided in standard libraries that come with most languages. But still it is important for you to know how to use one and what the advantages and disadvantages are. \n\n## What makes a good algorithm\n\n### Correctness\n\nSometimes a algothim does not give you a correct answer or the best answer because the only perfect algorithms that we know for those problems take a really, really long time. Fore example lets say we want a programm that would determine the most effiecient oute for a truck that delivers packages. staring and ending the day at a depot. It would take weeks to run to going through all the possibilites. But if we're okay with a program that would determine a route that goed but maybe not the best. Then i could run in seconds in some cases, good is good enough.\n\n### Efficiency \t\n\nAsymptotic analysis allows algorithms to be compared independently of a particular pogramming laungauage or handware. \n\n## Asymptotic notation\n\nLet's think about the running time of an algorithm more carefully. We use a combination of two ideas. First, we determine how long the algorithm takes, in terms of the size of its input. So we think about the running time of the algorithm as a function of the size of its input. The second idea is that we focus on how fast this function grows with the input size. We call that the rate of growth of the running time. To keep things manageable, we simplify the function to distill the most important part and cast aside the less important parts.\n\nWe'll see three forms of it: **big-Θ** notation, **big-O** notation, and **big-Ω** notation.\n\n### Big-Θ notation\n\nWhen we use **big-Θ** notation, we're saying that we have an asymptotically tight bound on the running time. \"Asymptotically\" because it matters for only large values of **n**. \"Tight bound\" because we've nailed the running time to within a constant factor above and below.\n\n### Big O notation\n\nBig-O notation is used by programmers to compare and measure the performance of algorithms. Big O notation is one of the most fundamental tools for computer scientists to analyze the cost of an algorithm. It is a good practice for software engineers to understand in-depth as well. The big O notation gives a strong statement about the worst-case running time. We use big-Θ notation to asymptotically bound the growth of a running time to within constant factors above and below. Sometimes we want to bound from only above. Because big-O notation gives only an asymptotic upper bound, and not an asymptotically tight bound, we can make statements that at first blush seem incorrect, but are technically correct.\n\n\u003Ca href=\"\u002Fimages\u002Fprojects\u002Fminor\u002Falgorithm\u002Fbig_o_notation.jpeg\" target=\"_blank\" rel=\"some text\"\u003E\n  \u003Cimg width=\"80%\" src=\"\u002Fimages\u002Fprojects\u002Fminor\u002Falgorithm\u002Fbig_o_notation.jpeg\" alt=\"Big O noation\"\u002F\u003E\n\u003C\u002Fa\u003E\n\n#### O(1) has the least complexity\n\nIf you can build an algorithm that solves the problem in O(1) notation, you are likely at your best possible solution. When the complexity of a scenario exceeds O(1), we can examine it by looking for its O(1\u002Fg(n)) equivalent. For instance, O(1\u002Fn) is more difficult than O(1\u002Fn2).\n\n#### O(log(n)) is more complex than O(1), but less complex than polynomials\n\nBecause sorting algorithms are frequently associated with divide and conquer algorithms, O(log(n)) is a desirable complexity to aim for. Because the square root function can be regarded a polynomial with an exponent of 0.5, O(log(n)) is less difficult than O(n).\n\n#### O(nˣ) Complexity of polynomials increases as the exponent increases\n\nFor example, O(n⁵) is more complex than O(n⁴). Due to the simplicity of it.\n\n#### O(2ⁿ) Exponentials have greater complexity than polynomials as long as the coefficients are positive multiples of n\n\nO(2ⁿ) is more complex than O(n⁹⁹), but O(2ⁿ) is actually less complex than O(1). We generally take 2 as base for exponentials and logarithms because things tends to be binary in Computer Science, but exponents can be changed by changing the coefficients. If not specified, the base for logarithms is assumed to be 2.\n\nyou can write a book about big o notation so much and so big is the subject but for more information I would just google the topic.  \n\n### Big-Ω (Big-Omega) notation\n\nWe might wish to declare that an algorithm takes at least a specific amount of time without specifying a maximum time. The Greek letter \"omega\" is used in big-Ω notation. We use big-Ω notation for **asymptotic lower bounds**, since it bounds the growth of the running time from below for large enough input sizes.\n\n# Lets begin\n\n## Basics\n\n### Arrays:\n\nPython = list = non type bound\n\nJava = array = type bound\n\n### Executions\n\nOperations on Data structures\n\n- Access and read values \n- Search for an arbitrary values \n- Insert values at any point into the structure \n- Delete values in the structure \n\nWe access the data in the array by using the index of the stored positions of the value. Every value in the array has its index with which you can locate it also called an address. The base index in most languages is 0 to n; space = n * m.  \n\n```python\nnew_list = [1, 2, 3]\nresult = new_list[0]\t# 1\nresult = new_list[10] \t# IndexError: list index out of range \n```\n\nYou cannot access an address index that is larger than your instantiated array size. This will always result in an index out of bound error.   \n\nLets now search for a value in our list with Linear search:\n\n```python\nif 1 in new_list : print(True)\n    \nfor n in new_list:\n    if n == 1:\n        print(True)\n        break\n```\n\nLets insert a new value in the array: there are two methods to do so one on linear runtime and on constant time Append. They're different in that insert linear will insert in every given index and append will add to the array. But it also depends on the language we use. \n\n```python\nnumbers = [] # Default 1 element can be inserted \nlen(numbers) # Will give 0 as answer \nnumbers.append(2)\nnumbers.append(200) # Will execute resize array \n\n```\n\nThe append function will only increase the when the index will hit size 0, 4, 8, 16, 25, 35, 46... and so on we call this amortized constant space complexity. \n\n```python\n# Big-O of K | K = Number of items we append\nnumbers = []\nnumbers.extend([4, 5, 6]) # Makes a serie of append calls\n```\n\n## Linked list \n\nEach data structure solves a particular problem. Arrays are particularly good at accessing\u002Freading values that will happen in constant time. But arrays are pretty bad at inserting and deleting which both run at linear time. Linked lists on the other hand are somewhat better at this although it has some problems. They are trying to solve a problem that involves far more inserts and deletes than accessing. A linked list can be a better tool than an array.\n\nA linked list is a linear data structure where each element in the list is contained in a separate object called a node. A node models two pieces of information an individual item of the data we want to store and a reference to the next node in the list. The first node in the linked list is called the head of the list. While the last node is called the tail. The head and the tail nodes are special the list only maintains a reference to the head although in some implementations it keeps a reference to the tail as well. Every node other than the tail point to the next node in the list. But the tail doesn't point to anything this is how we know it's the end of the list. Nodes are what called self-referential objects. Linked lists usually come in two forms a singly linked list where each node stores a reference to the next node in the list or a doubly linked list where each node stores a reference to both the node before and after\n\n```python\nclass Node: \n    # An object for storing a single node of a linked list\n    # Models tow attributes - data and the link to the next node in the \t\tlist\n    \n    data = None # To hold on to the data we are storing\n    next_node = None # To point to the next node in the list\n    \n    def __init__(self, data):\n        self.data = data\n        \n    def __repr__(self):\n        return \"\u003CNode data: %s\u003E\" % self.data # ToString value\n    \nclass LinkedList:\n\t# Singly linked list\n  \n    def __init__(self):\n        self.head = None\n    \n    def is_empy(self):\n        return self.head == None\n    \n    def size(self):\n        # Return the number of nodes in the list \n        # Takes 0(n) \u002F linear time\n        \n        current = self.head\n        count = 0\n        \n        while current:\n            count += 1\n            current = current.next_node\n        \n        return count\n\n  \tdef add(self, data):\n        # Adds new Node container data at head of the list\n        # Takes 0(1) time\n        \n        new_node = Node(data)\n        new_node.next_node = self.head\n        self.head = new_node\n        \n    def search(self, key):\n        # Search for the first node containing data that maches the key\n        # Return the node or 'None' if not found\n        # Takes 0(n) time\n        \n        current = self.head\n        \n        while current:\n            if current.data == key:\n                return current \n            else:\n                current = current.next_node\n                \n        return None\n    \n    def insert(self, data, index):\n        # Inserts a new Node containing data at index position \n        # Insertion takes 0(1) time but infing the node at the insertion point take 0(n time)\n        # Takes overal 0(n) time\n        \n        if index == 0 :\n            self.add(data)\n        \n        if index \u003E 0:\n            new = Node(data)\n            \n            position = index \n            current = self.head\n            \n            while position \u003E 1:\n                current = node.next_node\n                position -= 1 \n                \n            prev_node = current \n            next_node = current.next_node \n            \n            prev_node.next_node = new \n            new.next_node = next_node\n    \n    def remove(self, key):\n        # Removes Node containing data that matches the key\n        # Return the node of None if key doesn't exists\n        # Takes 0(n) time\n        \n        current = self.head\n        previous = None;\n        found = False\n        \n        while current and not found:\n            if current.data == key and current == self.head:\n                found = True\n                self.head = current.next_node\n            elif current.data == key:\n                found = True \n                previous.next_node = current.next_node\n            else:\n                previous = current\n                current = current.next_node\n                \n        return current     \n        \n    def node_at_index(self, index):\n        if index == 0:\n            return self.head\n        else:\n            current = self.head\n            position = 0\n        \n        while position \u003C index:\n            current = current.next_node\n            possition += 1 \n        \n        return current\n        \n    def __repr__(self):\n        # Return a string representation of the list\n        # Takes 0(n) time\n        \n        nodes = []\n        current = self.head\n        \n        while current:\n            if current is self.head:\n                nodes.append(\"[Head: %s]\" % current.data)\n            elif current.next_node is None:\n                nodes.append(\"[Tail: %s]\" % current.data)\n            else:\n                nodes.append(\"[%s]\" % current.data)\n            \n            current = current.next_node\n       \treturn '-\u003E '.join(nodes)\n\t\t \n        \n        \n# [Head],[],[],[],[Tail]\nl = LinkedList()\nl.add(1)\nl.size() # returns 1 \nl.add(2)\nl.add(3)\nl.size() # returns 3\n\nl # returns [Head: 3]-\u003E [2]-\u003E [Tail: 1]\n        \n```\n\nHead can be seen as the top of an book pile its the first book you pick from the pile. Unlike arrays where when you insert an element into the array all element after the particular index need to be shifted. With a linked list we just need to change the references to next on a few nodes. This way we can insert a node at any point in the list in constant time.\n\n## Merge sort\n\nMerge sort works like binary sort by splitting up the problem into sub problems. But it takes it one step further. In the first sequence we split the array into two smaller arrays on the second sequence we are going to split the first sequence again and so on until we are down to single element arrays. After that the merge sort algorithm works backwards. By repeatedly merging the single element arrays and sorting them at the same time.\n\nSolving a problem like this by recursively breaking down the problem into subparts until it is easily solvable is an algorithmic strategy called divide and conquer. \n\n```python\ndef merge_sort(list):\n    # Sorts a list in ascending order \n    # Return a new sorted list \n    \n    # Devide: Find the midpoint of the list and divide into sublists\n    # Conquer: Recursively sort the sublist created in previous step\n    # Combine: Merge the sorted sublists created in previous step \n    \n    # Takes O(kn log n) time\n    \n    if len(list) \u003C= 1:\n        return list \n    \n    left_half, right_half = split(list)\n    \n    left = merge_sort(left_half)\n    right = merge_sort(right_half)\n    \n    return merge(left, right)\n\ndef split(list):\n    # Divide the unsorted list at midpoint into sublists\n    # Returns two sublists - left and right\n    \n    # Takes overal O(k log n) time\n    \n    min = len(list)\u002F\u002F2\n    left = list[:mid] # list[0:mid]            Takes n of k \n    right = list[mid:] # list[mid:len(list)]\n    \n    return left, right\n\ndef merge(left, right):\n    # Merges two lists (arrays), sorting them in the process\n    # Return a new merged list\n    \n    # Runs in overal O(n) time\n    \n    l = []\n    i = 0\n    j = 0\n    \n    while i \u003C len(left) and j \u003C len(right):\n        if left[i] \u003C right[j]:\n            l.append(left[i])\n            i += 1\n        elif left[i] \u003E= right[j]:\n            l.append(right[j])\n            j += 1\n   \n    while i \u003C len(left):\n        l.append(left[i])\n        i += 1 \n        \n    while j \u003C len(right):\n        l.append(right[j])\n        j += 1\n     \n    return l\n\ndef verify_sorted(list):\n    n = len(list)\n    \n    # Stopping condition \n    if n == 0 or n == 1: \n        return true\n    \n    return list[0] \u003C list[1] and verify_sorted(list[1:])\n \t# [1, 2, 3, 4, 5]\n    # [2, 3, 4, 5]\n    # [3, 4, 5]\n    # [4, 5]\n    # [5]\n\n        \nalist = [54, 62, 93, 17, 77, 31, 44, 55, 20]\nl = merge_sort(alist)\nprint(l) # Return [17, 20, 31, 44, 54, 62, 77, 93]\nprint(verify_sorted(alist)) # Return False\nprint(verify_sorted(l)) # Return True\n```\n\n### Linked list merge sort\n\n```python\nfrom linked_list import LinkedList\n\ndef merge_sort(linked_list):\n    # Sorts a linked list in ascending order\n    # - Recursively divide the linked list into sublists containing a single node\n    # - Repeatedly merge the sublists to produce sorted sublists until on remains \n    # Returns a sorted linked list\n    \n    if linked_list.size() == 1:\n        return linked_list\n    elif linked_list.head is None:\n        return linked_list\n    \n    left_half, right_half = split(linked_list)\n    left = merge_sort(left_half)\n    right = merge_sort(right_half)\n    \n    return merge(left, right)\n\ndef split(linked_list):\n    # Divide the unsorted list at midpoint into sub linked lists\n    \n    if linked_list == None or linked_list == None:\n        left_half = linked_list\n        right_half == None \n        \n        return left_half, right_half\n    \n    else:\n        size = linked_list.size()\n        mid = size\u002F\u002F2 \n    \n    \tmid_node = linked_list.node_at_index(mid - 1)\n        \n        left_half = linked_list \n        right_half = LinkedList()\n        right_half.head = mid_node.next_node\n        mid_node.next_node = None\n        \n        return left_half, right_half\n  \ndef merge(left, right):\n    # Merges two linked lists, sorting by data in the nodes\n    # Return a new, merged list\n    \n    # Create a new linked list that contains nodes from \n    # Merging left and right\n    merged = LinkedList()\n    \n    # Add a fake head that is discarded later \n    merged.add(0)\n    \n    # Set current to the head of the linked list\n    current = merged.head\n    \n    # Obtain head nodes for left and right linked lists\n    left_head = left.head\n    right_head = right.head\n    \n    # Iterate over left and right unril we reach the tail node of either\n    while left_head or right_head\n    \t# If the head node of left is None, we are past the tail\n        # Add the node from right to merged linked list\n        \n        if left_head is None:\n            current.next_node = right_head\n            # Call next on right to set loop condition to False \n            right_head = right_head.next_node\n        \n        # If the head node of tight is None, we are past the tail\n        # Add the tail node from left to merged linked list\n        elif right_head is None\n        \tcurrent.next_node = left_head\n            # Call next on left to set loop condition to False\n            left_head = left_head.next_node\n            \n        else:\n            # Not at either tail node \n            # Obtain node data to perform comparison operations\n            left_data = left_head.data\n            right_data = right_head.data\n            # If data on left is less than right, set current to left node\n            if left_data \u003C right_data:\n                current.next_node = left_head\n                # Move left head to next node \n                left_head = left_head.next_node\n            # If data on left is greater than right, set current to right node\n            else:\n                current.next_node = right_head\n                # Move right head to next node\n                right_head = right_head.next_node \n         \n        # Move current to next node\n        current = current.next_node\n     \n    # Discard fake head and set first merged node as head\n    head = merged.head.next_node\n    merged.head = head\n    \n    return merged \n   \nl = LinkedList()\nl.add(10)\nl.add(2)\nl.add(44)\nl.add(15)\nl.add(200)\n\nprint(l)\nsorted_linked_list = merged_sort(l)\nprint(sorted_linked_list)\n#[Head: 200]-\u003E [15]-\u003E [44]-\u003E [2]-\u003E [Tail: 10]\n#[Head: 2]-\u003E [10]-\u003E [15]-\u003E [44]-\u003E [Tail: 200]\n\n# split -\u003E size \n# midpoint = 2 \n#[Head: 200]-\u003E [15]-----\u003E [44]-\u003E [2]-\u003E [Tail: 10]\n#Left : [Head: 200]-\u003E [15] \n#SubLeft : [Head: 200]\n#SubRight : [Head: 15]\n#Current: [Head: 15]-\u003E [200]\n\n\n#Right: [Head: 44]-\u003E [2]-\u003E [Tail: 10]\n```\n\nThese are the data structures I began with, these are the fundamentals for algorithmic. \n\n## Recursion \n\nThe ability of a function to call itself. Recursive functions are difficult to understand. The flow of control is quite complex.\n\n```python\n# Normal\ndef sum(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\nprint(sum([1, 2, 7, 9]))\n```\n\n```python\n# Recursion\ndef sum(numbers):\n    if not numbers: \n        return 0 \n    print(\"Calling sum(%s)\" % numbers[1:])\n \tremaining_sum = sum(numbers[1:])\n    print(\"Call to sum(%s) returning %d + %d\" % (numbers, numbers[0], remaining_sum))\n    return numbers[0] + remaining_sum\n\nprint(sum([1, 2, 7, 9]))\n# Calling sum([2, 7, 9])\n# Calling sum([7, 9])\n# Calling sum([9])\n# Calling sum([])\n# Call sum([9]) returning 9 + 0\n# Call sum([7, 9]) returning 7 + 9\n# Call sum([2, 7, 9]) returning 2 + 16\n# Call sum([1, 2, 7, 9]) returning 1 + 18\n# Result: 19\n```\n\n## Quick Sort\n\nQuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. \n\nList: [4, 6, 3, 2, 9, 7, 3, 5]\n\n​\tPivot: [4]\n\n​\tLess than pivot: [3, 2, 3]  -\u003E  [2, 3] [3] [ ]  -\u003E  [ ] [2] [3] = [2, 3]  -\u003E  [2, 3] [3] [ ]  -\u003E  [2, 3, 3]\n\n​\tGreater than pivot: [6, 9, 7, 5] -\u003E [5] [6] [9, 7]  -\u003E  [5, 6, 7, 9]\n\n  [2, 3, 3, 4, 5, 6, 7, 9]\n\n```python\nimport sys\nfrom load import load_numbers\n\nnumbers = load_numbers(sys.argv[1])\n\ndef quicksort(values):\n    if len(values) \u003C= 1:\n        return values \n    less_than_pivot = []\n    greater_than_pivot = []\n    pivot = value[0]\n    \n    for value in values[1:]:\n        if value \u003C= pivot:\n            less_than_pivot.append(value)\n        else :\n            greater_than_pivot.append(value)\n    \n    print(\"%15s %1s %-15s\" % (less_than_pivot, pivot, greater_than_pivot))\n    return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)\n\nprint(numbers) \n# [4, 6, 3, 2, 9, 7, 3, 5]\nsorted_number = quicksort(numbers)\n# [3, 2, 3] 4 [6, 9, 7, 5]\n# \t [2, 3] 3 []\n#        [] 2 [3]\n#       [5] 6 [9, 7]\n#       [7] 9 []\nprint(sorted_numbers) \n# [2, 3, 3, 4, 5, 6, 7, 9]\n```\n\n## Selection sort\n\nAlso a bad sorting sorting algorithm. With each loop we will look through each of the values in the unsorted array and find the smallest value and move that value to the end of the sorted array. We start with the first value in the unsorted and say its the minimum or smallest value we have seen so far for now. Than we will look at the next value and see if that one is smaller than the current smallest value if so we mark is as the new minimum. We continue that way until we reach the end of the list. We know that the value that we have marked is the smallest value in the array. Than we move that value from the current list to a new list called sorted and we delete it from the current list. We do this until there are no more items in the unsorted array. \n\n```python\nimport sys\nfrom load import load_numbers\n\nnumbers = load_numbers(sys.argv[1])\n\ndef selection_sort(values):\n    sorted_list = []\n    print(\"%-25s %-25s\" % (values, sorted_list))\n    for i in range(0, len(values)):\n        index_to_move = index_of_min(values)\n        sorted_list.append(values.pop(index_to_move))\n        print(\"%-25s %-25s\" % (values, sorted_list))\n    return sorted_list \n\ndef index_of_min(values):\n    min_index = 0\n    for i in range(1, len(values)):\n        if values[i] \u003C values[min_index]:\n            min_index = i\n    return min_index\n\nprint(selection_sort(numbers))\n```\n\n## Bogo Sort \n\nBad sorting randomly switching numbers till its sorted. Stumbling on a solution is literally a matter of luck and for lists with more than a few items it might never happen.\n\n```python\nimport random\nimport sys\nfrom load import load_number \n\nnumber = load_numbers(sys.argv[1])\n\ndef is_sorted(values):\n    for index in range(len(values) - 1)\n     \tif values[index] \u003E values[index + 1]:\n            return False\n    return True\n\ndef bogo_sort(values):\n    attempts = 0\n    while not is_sorted(values):\n        print(attempts)\n        random.shuffle(values)\n        attempts += 1\n    return values \n\nprint(bogo_sort(numbers))\n\n```\n\n";bB.readingTime="20 min read";bB.twitterShareUrl="https:\u002F\u002Ftwitter.com\u002Fintent\u002Ftweet";return {data:[{project:bB,_img:ds}],fetch:{"data-v-7551e893:0":{toastOptions:{duration:2000,theme:"bubble"},currentlyActiveToc:"",observer:aY,observerOptions:{root:void 0,threshold:0},project:bB,_img:ds}},mutations:[["setItem",{item:aY,id:bC,resource:"comments"}]]}}("text","element","span","token","punctuation"," ","keyword","\n","operator","(",")","comment","=",".","number",":","p",",","[","]","\n    ","\n        ","builtin","1","return","li","a","def","function","true",-1,"icon","icon-link","\n    \n    ","boolean","if","0","print"," current","values","==","None","list","div","nuxt-content-highlight","pre","language-python","line-numbers","code","len","append"," self","\n\n","self","while","add","\n            ",2,"h2","string","next_node ","\nl","numbers","%","\u003C",3,"h3","2","+=","else","left","import","in","head ","\n        \n        "," right","strong","for","data","ul","True","data ","size","elif","is"," merge_sort","i","sum"," numbers"," values","h4"," n "," key"," index ","and"," LinkedList"," left"," i ","right","j","l","from"," linked_list","+",null,"Merge sort","Selection sort"," new_list","\nnumbers"," data","\n        \n        current ","\n            current ","# Takes 0(n) time"," index","\u003E"," current ","not","head","next_node\n            ","\n                nodes","\u003C=","\n    right ","verify_sorted","or"," linked_list ","linked_list"," right_head"," left_head"," sys\n"," load "," load_numbers","sys","argv"," quicksort","range",{},"minor_algorithmics","data-structures","Data structures","what-makes-a-good-algorithm","What makes a good algorithm","correctness","Correctness","efficiency","Efficiency","asymptotic-notation","Asymptotic notation","big-θ-notation","Big-Θ notation","big-o-notation","Big O notation","big-ω-big-omega-notation","Big-Ω (Big-Omega) notation","basics","Basics","arrays","Arrays:","executions","Executions","linked-list","Linked list","merge-sort","linked-list-merge-sort","Linked list merge sort","recursion","Recursion","quick-sort","Quick Sort","selection-sort","bogo-sort","Bogo Sort","_blank","h1","big-Θ","\u002Fimages\u002Fprojects\u002Fminor\u002Falgorithm\u002Fbig_o_notation.jpeg","3","\nresult ","10","\n    \n","200","class","class-name"," \n    ","__init__","\n        self","__repr__","next_node\n        \n        "," Node","head\n        \n        ","\n                current ","next_node\n                \n        "," position ","False","\n                found ","node_at_index"," \n        \n        ","\n        current ","\nl ","merge_sort"," right_half "," split","left_half","right_half"," merge","split","\u002F\u002F","\n    left ","mid","merge"," j ","\n            l","\n        l"," \n        ","44","alist"," left_half","-"," merged","head\n    \n    "," left_head ","\n            current","\n                current","7","9"," load_numbers\n\nnumbers "," value "," pivot","value","less_than_pivot"," \n","selection_sort","\"%-25s %-25s\""," sorted_list","bogo_sort",{})));